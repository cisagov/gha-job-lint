---
name: "GHA Lint Job"
description: "Run linting on a project repository."

env:
  CURL_CACHE_DIR: ~/.cache/curl
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit

inputs:
  go-version:
    default: "1.16"
    description: "The version of golang to install."
    required: false
  packer-version:
    description: "The version of Packer to install."
    required: true
  python-version:
    default: "3.9"
    description: "The version of Python to install."
    required: false
  run-tmate:
    description: "Flag whether or not to set up a tmate session."
    required: true
  shfmt-version:
    default: "v3.3.0"
    description: "The version of shfmt to install."
    required: false
  terraform-docs-version:
    default: "v0.14.1"
    description: "The version of terraform-docs to install."
    required: false
  terraform-version:
    description: "The version of Terraform to install."
    required: true

runs:
  using: "composite"
  steps:
    - id: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}
    # GO_VERSION and GOCACHE are used by the cache task, so the Go
    # installation must happen before that.
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ inputs.go-version }}
    - name: Store installed Go version
      id: go-version
      run: |
        echo "::set-output name=version::"\
        "$(go version | sed 's/^go version go\([0-9.]\+\) .*/\1/')"
    - name: Lookup Go cache directory
      id: go-cache
      run: |
        echo "::set-output name=dir::$(go env GOCACHE)"
    - uses: actions/cache@v2
      env:
        BASE_CACHE_KEY: "${{ github.job }}-${{ runner.os }}-\
          py${{ steps.setup-python.outputs.python-version }}-\
          go${{ steps.go-version.outputs.version }}-\
          packer${{ inputs.packer-version }}-\
          tf${{ inputs.terraform-version }}-"
      with:
        # Note that the .terraform directory IS NOT included in the
        # cache because if we were caching, then we would need to use
        # the `-upgrade=true` option. This option blindly pulls down the
        # latest modules and providers instead of checking to see if an
        # update is required. That behavior defeats the benefits of caching.
        # so there is no point in doing it for the .terraform directory.
        path: |
          ${{ env.PIP_CACHE_DIR }}
          ${{ env.PRE_COMMIT_CACHE_DIR }}
          ${{ env.CURL_CACHE_DIR }}
          ${{ steps.go-cache.outputs.dir }}
        key: "${{ env.BASE_CACHE_KEY }}\
          ${{ hashFiles('**/requirements-test.txt') }}-\
          ${{ hashFiles('**/requirements.txt') }}-\
          ${{ hashFiles('**/.pre-commit-config.yaml') }}"
        restore-keys: |
          ${{ env.BASE_CACHE_KEY }}
    - name: Setup curl cache
      run: mkdir -p ${{ env.CURL_CACHE_DIR }}
    - name: Install Packer
      run: |
        PACKER_ZIP="packer_${{ inputs.packer-version }}_linux_amd64.zip"
        curl --output ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}" \
          --time-cond ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}" \
          --location \
          "https://releases.hashicorp.com/packer/"\
          "${{ inputs.packer-version }}/${PACKER_ZIP}"
        sudo unzip -d /opt/packer \
          ${{ env.CURL_CACHE_DIR }}/"${PACKER_ZIP}"
        sudo mv /usr/local/bin/packer /usr/local/bin/packer-default
        sudo ln -s /opt/packer/packer /usr/local/bin/packer
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.terraform-version }}
    - name: Install shfmt
      run: go install mvdan.cc/sh/v3/cmd/shfmt@${{ inputs.shfmt-version }}
    - name: Install Terraform-docs
      run: |
        go install github.com/terraform-docs/\
        terraform-docs@${{ inputs.terraform-docs-version }}
    - name: Find and initialize Terraform directories
      run: |
        for path in $(find . -not \( -type d -name ".terraform" -prune \) \
          -type f -iname "*.tf" -exec dirname "{}" \; | sort -u); do \
          echo "Initializing '$path'..."; \
          terraform init -input=false -backend=false "$path"; \
          done
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade --requirement requirements-test.txt
    - name: Set up pre-commit hook environments
      run: pre-commit install-hooks
    - name: Run pre-commit on all files
      run: pre-commit run --all-files
    - name: Setup tmate debug session
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.run-tmate }}
